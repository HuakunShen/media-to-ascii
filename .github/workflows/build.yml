# This is a basic workflow to help you get started with Actions

name: build

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the "main" branch
#   push:
#     branches: [ "main" ]
#   pull_request:
#     branches: [ "main" ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# Generates binaries for different platforms, which will be uploaded to the Actions page.
# We then manually uplaod them into the Release's assets.
# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # Builds for linux
  ubuntu-build:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v3
      
      # Install rust
      - name: Install rust
        run: curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y

      # Install opencv
      - name: Install opencv
        run: sudo apt install libopencv-dev clang libclang-dev
        
      # Build
      - name: Build
        run: cargo build --release
        
      # Ready artifacts for upload
      - name: Prepare Artifacts
        run: |
          export MEDIATOASCII_VERSION=$(perl -ne 'print "$1\n" if /^version\s*=\s*"(.*?)"/' Cargo.toml)
          chmod +x target/release/mediatoascii
          tar -czvf mediatoascii-x86_64-unknown-linux-gnu-$MEDIATOASCII_VERSION.tar.gz -C target/release/ mediatoascii
        
      # Upload artifact: https://github.com/actions/upload-artifact
      - name: Upload Artifacts
        uses: actions/upload-artifact@v3
        with:
          name: mediatoascii-x86_64-unknown-linux-gnu
          path: mediatoascii-x86_64-unknown-linux-gnu-*.tar.gz
          retention-days: 1
        
  macos-build:
    # The type of runner that the job will run on
    runs-on: macos-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v3

      # Install rust
      - name: Install rust
        run: curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y

      # dynamic link libclang correctly, according to https://github.com/twistedfall/opencv-rust
      - name: Dynamic Link libclang
        run: |
          xcode-select --print-path
          locate libclang.dylib
          export DYLD_FALLBACK_LIBRARY_PATH="$(xcode-select --print-path)/Toolchains/XcodeDefault.xctoolchain/usr/lib/"

      # Install opencv
      - name: Install opencv
        run: brew install opencv
        
      # Build
      - name: Build
        run: cargo build --release
        
      # Ready artifacts for upload
      - name: Prepare Artifacts
        run: |
          export MEDIATOASCII_VERSION=$(perl -ne 'print "$1\n" if /^version\s*=\s*"(.*?)"/' Cargo.toml)
          chmod +x target/release/mediatoascii
          zip -j mediatoascii-x86_64-apple-darwin-$MEDIATOASCII_VERSION.zip target/release/mediatoascii
        
      # Upload artifact: https://github.com/actions/upload-artifact
      - name: Upload Artifacts
        uses: actions/upload-artifact@v3
        with:
          name: mediatoascii-x86_64-apple-darwin
          path: mediatoascii-x86_64-apple-darwin-*.zip
          retention-days: 1
        
  windows-build:
    # The type of runner that the job will run on
    runs-on: windows-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v3
      
      # Install rust
      - name: Install rust
        run: curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y

      # DEPRECATED: vcpkg takes up WAY too much space for some reason.  Use chocolatey instead
      # Install vcpkg
      # - name: run-vcpkg
      #   # You may pin to the exact commit or the version.
      #   # uses: lukka/run-vcpkg@c62308335e15360efe9eba11298318f7f6a3606e
      #   uses: lukka/run-vcpkg@v10.4
      #   with:
      #     # Specify the full SHA-1 hash of a Git commit (not a branch name, nor a tag!) that establishes which version of vcpkg needs to be used. When using vcpkg as a Git submodule, this input is *not* needed as implicitly specified by the submodule.
      #     vcpkgGitCommitId: d52632d9a0c4a5b57de285b1e03722a067dd80eb

      - name: Chocolatey Action
        # You may pin to the exact commit or the version.
        # uses: crazy-max/ghaction-chocolatey@0e015857dd851f84fcb7fb53380eb5c4c8202333
        uses: crazy-max/ghaction-chocolatey@v3.0.0
        with:
          # Arguments to pass to Chocolatey
          args: install llvm opencv 
          # Docker image to use
          #image: # optional, default is ghcr.io/crazy-max/ghaction-chocolatey
            
      # - name: Install Clang
      #   # You may pin to the exact commit or the version.
      #   # uses: egor-tensin/setup-clang@01d437c0618e76d3c44e7d58f5d175c75cb37bac
      #   uses: egor-tensin/setup-clang@v1

      # # Install opencv
      # - name: Install opencv
      #   run: |
      #     vcpkg update
      #     vcpkg install llvm opencv4[contrib,nonfree]

      # Set opencv dynamic link env vars
      - name: OpenCV Dynamic Link Env Vars
        run: |
          $env:OPENCV_LINK_LIBS=$(Get-ChildItem -Path C:\tools -Recurse -Filter 'opencv_world*.lib' | Select-Object -first 1 | Select-Object -ExpandProperty Name)
          $env:OPENCV_LINK_PATHS=$(Get-ChildItem -Path C:\tools -Recurse -Filter 'opencv_world*.lib' | Select-Object -first 1 | Select-Object -ExpandProperty FullName | Split-Path -parent)
          $env:OPENCV_INCLUDE_PATHS="C:\tools\opencv\build\include"
        
      # Build
      - name: Build
        run: cargo build --release
        
      # Upload artifact: https://github.com/actions/upload-artifact
      - name: Upload Artifacts
        uses: actions/upload-artifact@v3
        with:
          name: opencv-error-log
          path: D:\a\media-to-ascii\media-to-ascii\vcpkg\buildtrees\opencv4\install-x86-windows-rel-out.log
          retention-days: 1

