# This is a basic workflow to help you get started with Actions

name: build

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the "main" branch
#   push:
#     branches: [ "main" ]
#   pull_request:
#     branches: [ "main" ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# Generates binaries for different platforms, which will be uploaded to the Actions page.
# We then manually uplaod them into the Release's assets.
# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  macos-build:
    # The type of runner that the job will run on
    runs-on: macos-14

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v3

      # Install rust
      - name: Install rust
        run: curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y

      # See https://github.com/orgs/community/discussions/26635
      # - name: brew bash
      #   run: brew install bash

      # dynamic link libclang correctly, according to https://github.com/twistedfall/opencv-rust
      - name: Dynamic Link libclang
        # shell: /usr/local/bin/bash {0}
        run: echo "DYLD_FALLBACK_LIBRARY_PATH=$(xcode-select --print-path)/Toolchains/XcodeDefault.xctoolchain/usr/lib/" >> $GITHUB_ENV

      # Install opencv
      #- name: Install opencv
      #  shell: /usr/local/bin/bash {0}
      #  run: |
      #    echo ${DYLD_FALLBACK_LIBRARY_PATH:-is_empty}
      #    brew install opencv

      # We install to /usr/local to simplify things, as cmake doesn't have permissions by default for other dirs like /opt or /usr/local/opencv
      # Pull opencv source, unzip, configure cmake, build, and install
      # Disable image formats like jpeg, png, tiff, as we use rust image crate instead.  See https://docs.opencv.org/4.x/db/d05/tutorial_config_reference.html
      # Inspired from https://github.com/twistedfall/opencv-rust/issues/364
      - name: Install OpenCV static lib
        run: |
          wget -O opencv.zip https://github.com/opencv/opencv/archive/refs/tags/4.8.1.zip
          wget -O opencv_contrib.zip https://github.com/opencv/opencv_contrib/archive/refs/tags/4.8.1.zip
          unzip opencv.zip && rm opencv.zip
          unzip opencv_contrib.zip && rm opencv_contrib.zip
          mkdir -p build && cd build
      - name: Install OpenCV static lib 1
        run: cmake -DCMAKE_BUILD_TYPE=Release -DBUILD_SHARED_LIBS=NO -DCMAKE_INSTALL_PREFIX=/usr/local -DBUILD_DOCS=OFF -DBUILD_EXAMPLES=OFF -DBUILD_TESTS=OFF -DBUILD_PERF_TESTS=OFF -DWITH_PNG=OFF -DWITH_JPEG=OFF -DWITH_TIFF=OFF -DWITH_WEBP=OFF -DWITH_OPENJPEG=OFF -DWITH_JASPER=OFF -DWITH_OPENEXR=OFF -DWITH_V4L=OFF  -DBUILD_opencv_java=OFF -DBUILD_opencv_python=OFF -DOPENCV_EXTRA_MODULES_PATH=../opencv_contrib-4.8.1/modules ../opencv-4.8.1
      - name: Install OpenCV static lib 2
        run: cmake --build . --target install --config Release --parallel 8
      - name: Install OpenCV static lib 3
        run: cmake --install . --prefix /usr/local         

      # OpenCV-rust looks for "opencv2/core/version.hpp" for the OpenCV version: https://github.com/twistedfall/opencv-rust/issues/368
      #  which is under /<install-prefix>/include/opencv4 for macOS
      # We also need to link a bunch of OSX frameworks.  See https://github.com/twistedfall/opencv-rust/issues/270#issuecomment-930208141
      # Build
      - name: Build
        run: |
          clang_dir="$(clang --print-search-dirs | awk -F= '/^libraries: =/ { print $2 }')"
          export OPENCV_LINK_LIBS=opencv_core,opencv_videoio,opencv_imgcodecs,opencv_imgproc,libippiw,libittnotify,libippicv,zlib,OpenCL.framework,Cocoa.framework,Accelerate.framework,AVFoundation.framework,CoreGraphics.framework,CoreMedia.framework,CoreVideo.framework,QuartzCore.framework,clang_rt.osx
          export OPENCV_LINK_PATHS=/usr/local/lib,/usr/local/lib/opencv4/3rdparty,$clang_dir/lib/darwin
          export OPENCV_INCLUDE_PATHS=/usr/local/include,/usr/local/include/opencv4
          cargo build --release
        
      # Ready artifacts for upload
      - name: Prepare Artifacts
        run: |
          export MEDIATOASCII_VERSION=$(perl -ne 'print "$1\n" if /^version\s*=\s*"(.*?)"/' Cargo.toml)
          chmod +x target/release/mediatoascii
          zip -j mediatoascii-x86_64-apple-darwin-$MEDIATOASCII_VERSION.zip target/release/mediatoascii
        
      # Upload artifact: https://github.com/actions/upload-artifact
      - name: Upload Artifacts
        uses: actions/upload-artifact@v3
        with:
          name: mediatoascii-x86_64-apple-darwin
          path: mediatoascii-x86_64-apple-darwin-*.zip
          retention-days: 1
        

